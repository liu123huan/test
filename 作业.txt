台阶递归
#include <iostream>
using namespace std;
unsigned long cal(unsigned long n)
{
 if(n==1)
  return 1;
 else if(n==2)
  return 2;
 return cal(n-1)+cal(n-2);
}
int main()
{
    size_t n;
    cout << "请输入你要走的台阶数 n :" ;
    cin >> n;
 cout << "走台阶有 " << cal(n) << " 种方案。" << endl;
 return 0;
}




台阶递推
#include <stdio.h> 
int main()
{
    int n;
    printf("Please Input:");
    scanf("%d", &n);
    int stair[n];
    stair[0] = 1;
    stair[1] = 2;
    for(int i=2; i<n; i++)
    {
        stair[i] = stair[i-1]+stair[i-2];
    }
    printf("Result:%d\n", stair[n-1]);
    return 0;      
}




阶乘递归
#include<stdio.h>
int ff(int n)
{
 long f;
 if(n<0) printf("n<0,input error");
 else if(n==0||n==1) f=1;
 else f=ff(n-1)*n;
 return (f);
 } 
 int main()
 {
  int n;
  long y;
  printf("input a int eager number:\n");
  scanf("%d",&n);
  y=ff(n);
  printf("%d!=%ld",n,y);
  return 0;
  
 }


阶乘递推


#include<stdio.h>
int main()
{
 int n,y=1,i;
 scanf("%d",&n);
 if(n==0||n==1) y=1;
 else for( i=1;i<=n;i++)
 {
  y=i*y; 
 }
 printf("%d!=%d",n,y);
 return 0;
  } 

数列递归递推

#include <stdio.h>
using namespace std;
int f1(int n)
{
 if (n == 1 || n == 2)
  return 1;
 return f1(n-1) + f1(n-2);
}
int f2(int n) 
{
 if (n == 1 || n == 2)
  return 1;
 int fa = 1, fb = 1;
 for (int i = 3; i <= n; ++i){
  int t = fa + fb;
  fa = fb;
  fb = t;
 }
 return fb;
}

int main(){
 int n;
 scanf("%d", &n);
 int ans1 = 0, ans2 = 0;
 ans1 = f1(n);
 ans2 = f2(n);
 printf("递归结果：%d\n递推结果：%d", ans1, ans2);
}

回文递归

#include <stdio.h>

#include <string.h>

#include <string.h>

int main(){

char s[100]; 

int i, j, n;

printf("输入字符串：");

gets(s);

n=strlen(s);

for(i=0,j=n-1;i<j;i++,j--)

if(s[i]!=s[j]) break;

if(i>=j)

printf(" is a palindrome\n");

else

printf(" is not a palindrome\n");

}
回文递推


#include <stdio.h>
 #include <string.h>
 
  void huiwen(char str[])
 {
      int i,len;
     bool flag = true;
    len=strlen(str);
     for(i=0;i<len/2;i++)
    {
         if(str[i]!=str[len-i-1])
       {
           flag=false;
           break;
       }
    }
    if(flag == false)
         printf("%s is not a palindrome\n",str);
     else
        printf("%s is a palindrome\n",str);
 }

 int main()
 {   
   char str[100] = {0};     
    printf("Input a string：");
    scanf("%s", str);      
   huiwen(str);
    getchar();
}

汉若塔递归
#include<iostream>
using namespace std;
void move(char a,char b,char c,int n);
int main()
{
    int n;
    char a='A',b='B',c='C';      
    cout<<"汉诺塔有多少层：";
    cin>>n;  
    move(a,b,c,n);
    return 0; 
}

void move(char a,char b,char c,int n) 
{   
  if(n==1){ 
    cout<<a<<"到"<<c<<endl;
  } 
  if(n>=2){ 
    move(a,c,b,n-1);
    cout<<a<<"到"<<c<<endl;
    move(b,a,c,n-1);
  } 
}

加法分解递归

#include<iostream>
using namespace std;
 
int sum = 0;
 

void dfs1(int n,int count,int*p)
{
 if(n==0){ 
  cout<<sum<<"=";
  for(int i=0;i<count;i++)
   if(i==count-1)
    cout<<p[i]<<endl;
   else
    cout<<p[i]<<"+";
  return;
 }
 for(int i=1;i<=n;i++){
  p[count]=i;
  dfs1(n-i,count+1,p);
 }
 return;
}
 

void dfs2(int n,int count,int*p)
{
 if(n==0){ 
  cout<<sum<<"=";
  for(int i=0;i<count;i++)
   if(i==count-1)
    cout<<p[i]<<endl;
   else
    cout<<p[i]<<"+";
  return;
 }
 int k = count>0 ? p[count-1] : 1; 
 for(int i=k;i<=n;i++){
  p[count] = i;
  dfs2(n-i,count+1,p);
 }
}
 
 
 
int main()
{
 int n,m;
 cin>>n>>m;
 sum = n;
 int* p = new int[n];
 if(m==1)
  dfs1(n,0,p);
 else if(m==2)
  dfs2(n,0,p);
 return 0;
}


